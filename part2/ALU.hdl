// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:

// Code worked for ALU no stat but had to redo entire code as couldn't figure out how to do with status 

//  // Not(in=zx, out=notzx);
//  Mux16(a=x, b=false, sel=zx, out=zxout);
//  Not16(in=zxout, out=nxout);
//  Mux16(a=zxout, b=nxout, sel=nx, out=xout);

//  // Not(in=zy, out=notzy);
//  Mux16(a=y, b=false, sel=zy, out=zyout);
//  Not16(in=zyout, out=nyout);
//  Mux16(a=zyout, b=nyout, sel=ny, out=yout);

//  And16(a=xout, b=yout, out=andout);
//  Add16(a=yout, b=xout, out=addout);

//  Mux16(a=andout, b=addout, sel=f, out=fout);

//  Not16(in=fout, out=notfout);

//  Mux16(a=fout, b=notfout, sel=no, out=finalout);
//  Mux16(a=finalout, b=false, sel=false, out=out);

//  Or(a=finalout[15], b=false, out=ng);


//  Or8Way(in=finalout[0..7], out=8or1);
//  Or8Way(in=finalout[8..15], out=8or2);

//  Or(a=8or1, b=8or2, out=zrOr);
//  Not(in=zrOr, out=zr);


// x handling
Mux16(a=x, b=false, sel=zx, out=zxout);
Not16(in=zxout, out=nxout);
Mux16(a=zxout, b=nxout, sel=nx, out=xout);

// y handling
Mux16(a=y, b=false, sel=zy, out=zyout);
Not16(in=zyout, out=nyout);
Mux16(a=zyout, b=nyout, sel=ny, out=yout);

// f
Add16(a=xout, b=yout, out=addout);
And16(a=xout, b=yout, out=andout);
Mux16(a=andout, b=addout, sel=f, out=fout);

// no
Not16(in=fout, out=notfout);
Mux16(a=fout, b=notfout, sel=no, out[0..7]=outLSB, out[8..14]=outMSB, out[15]=outMSBbit);

// Final output combination (Dummy Mux used for syntax)
Mux16(a[0..7]=outLSB, a[8..14]=outMSB, a[15]=outMSBbit, b=false, sel=false, out=out);

// status bits
Or8Way(in=outLSB, out=orLow);
Or8Way(in[0..6]=outMSB, in[7]=outMSBbit, out=orHigh);
Or(a=orLow, b=orHigh, out=orTotal);
Not(in=orTotal, out=zr);

// negative flag computation
Or(a=outMSBbit, b=false, out=ng);

}

